# DEVELOP A TOOL TO IDENTIFY COMMON
# VULNERABILITIES (E.G., SQL INJECTION,
# XSS) IN WEB APPLICATIONS.

# DELIVERABLE: A PYTHON-BASED
# SCANNER USING LIBRARIES LIKE
# REQUESTS AND BEAUTIFULSOUP.
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Common payloads
sql_payloads = ["' OR '1'='1", "'; DROP TABLE users; --", '" OR ""="']
xss_payloads = ['<script>alert(1)</script>', '" onmouseover="alert(1)"']

# Get all forms on a page
def get_forms(url):
    soup = BeautifulSoup(requests.get(url).content, "html.parser")
    return soup.find_all("form")

# Get form details
def get_form_details(form):
    details = {
        "action": form.attrs.get("action"),
        "method": form.attrs.get("method", "get").lower(),
        "inputs": []
    }
    for input_tag in form.find_all("input"):
        details["inputs"].append({
            "type": input_tag.attrs.get("type", "text"),
            "name": input_tag.attrs.get("name")
        })
    return details

# Submit form with payload
def submit_form(form_details, url, payload):
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input_field in form_details["inputs"]:
        if input_field["type"] != "submit" and input_field["name"]:
            data[input_field["name"]] = payload
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

# Scan for SQL Injection and XSS
def scan_vulnerabilities(url):
    forms = get_forms(url)
    print(f"[+] Found {len(forms)} forms on {url}")

    for form in forms:
        details = get_form_details(form)
        
        for payload in sql_payloads:
            response = submit_form(details, url, payload)
            if "sql" in response.text.lower() or "error" in response.text.lower():
                print("[!] Possible SQL Injection vulnerability:", payload)
        
        for payload in xss_payloads:
            response = submit_form(details, url, payload)
            if payload in response.text:
                print("[!] Possible XSS vulnerability:", payload)

# -------- Main Execution --------
if __name__ == "__main__":
    target = input("Enter URL to scan: ")
    scan_vulnerabilities(target)
